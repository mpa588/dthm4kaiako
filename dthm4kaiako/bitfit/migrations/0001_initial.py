# Generated by Django 2.1.5 on 2019-04-12 11:00

import ckeditor.fields
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('users', '0004_auto_20190215_1612'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('points', models.IntegerField(default=0)),
                ('goal', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('question_text', ckeditor.fields.RichTextField()),
                ('solution', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='TestCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expected_output', models.CharField(blank=True, max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='QuestionTypeFunction',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='bitfit.Question')),
                ('function_name', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Function Question',
                'verbose_name_plural': 'Function Questions',
            },
            bases=('bitfit.question',),
        ),
        migrations.CreateModel(
            name='QuestionTypeFunctionTestCase',
            fields=[
                ('testcase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='bitfit.TestCase')),
                ('function_params', models.CharField(blank=True, max_length=500)),
                ('expected_return', models.CharField(blank=True, max_length=500)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_cases', to='bitfit.QuestionTypeFunction')),
            ],
            options={
                'verbose_name': 'Function Question Test Case',
            },
            bases=('bitfit.testcase',),
        ),
        migrations.CreateModel(
            name='QuestionTypeProgram',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='bitfit.Question')),
            ],
            options={
                'verbose_name': 'Program Question',
                'verbose_name_plural': 'Program Questions',
            },
            bases=('bitfit.question',),
        ),
        migrations.CreateModel(
            name='QuestionTypeProgramTestCase',
            fields=[
                ('testcase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='bitfit.TestCase')),
                ('test_input', models.CharField(blank=True, max_length=500)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_cases', to='bitfit.QuestionTypeProgram')),
            ],
            options={
                'verbose_name': 'Program Question Test Case',
            },
            bases=('bitfit.testcase',),
        ),
    ]
